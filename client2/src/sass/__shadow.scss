

// $shadows: (
//   1: 0px 1px 1px 0px rgba(0,0,0,0.2), 
//   0px 2px 2px 0px rgba(0,0,0,0.14), 
//   0px 1px 5px 0px rgba(0,0,0,0.12),
// );

// @function shadow($name) {
//   @return map-get($shadows, $name);
// }


// 2. Shadows
// ===========================================================================

// Shadows
$s-z1: 0 2px 5px 0 rgba(0, 0, 0, .16), 0 2px 10px 0 rgba(0, 0, 0, .12) !default;
$s-z1-5: 0 5px 11px 0 rgba(0, 0, 0, .18), 0 4px 15px 0 rgba(0, 0, 0, .15) !default;
$s-z2: 0 8px 17px 0 rgba(0, 0, 0, .2), 0 6px 20px 0 rgba(0, 0, 0, .19) !default;
$s-z3: 0 12px 15px 0 rgba(0, 0, 0, .24), 0 17px 50px 0 rgba(0, 0, 0, .19) !default;
$s-z4: 0 16px 28px 0 rgba(0, 0, 0, .22), 0 25px 55px 0 rgba(0, 0, 0, .21) !default;
$s-z5: 0 27px 24px 0 rgba(0, 0, 0, .2), 0 40px 77px 0 rgba(0, 0, 0, .22) !default;



$s1:0px 1px 1px 0px rgba(0,0,0,0.2), 
0px 2px 2px 0px rgba(0,0,0,0.14), 
0px 1px 5px 0px rgba(0,0,0,0.12); 

$s2: rgba(0, 0, 0, 0.2) 0px 3px 5px -1px, 
rgba(0, 0, 0, 0.14) 0px 6px 10px 0px, 
rgba(0, 0, 0, 0.12) 0px 1px 18px 0px;

$s3: 0px 1px 4px 0px rgba(0,0,0,0.2), 
        0px 4px 5px 0px rgba(0,0,0,0.14), 
        0px 1px 10px 0px rgba(0,0,0,0.12);

$s4: 0px 1px 5px 0px rgba(0, 0, 0, 0.2),
0px 3px 4px 1px rgb(0 0 0 / 23%), 
0px 4px 11px 0px rgb(0 0 0 / 24%);

$s5: 0px 1px 4px 0px rgba(0, 0, 0, 0.2),
0px 2px 8px 0px rgba(0, 0, 0, 0.14),
0px 1px 7px 3px rgba(0, 0, 0, 0.12);

$b1: 0px 2px 1px -1px rgba(0,0,0,0.2),
0px 1px 1px 0px rgba(0,0,0,0.14),
0px 1px 3px 0px rgba(0,0,0,0.12);




@mixin shadow($shadow...) {
  $result: ();
  @each $value in $shadow {
    @if $value != null {
      $result: append($result, $value, "comma");
    }
    @if $value == none and length($shadow) > 1 {
      @warn "The keyword 'none' must be used as a single argument.";
    }
  }
  @if (length($result) > 0) {
    box-shadow: $result;
  }
}